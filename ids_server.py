import random
import os
import numpy as np
import pandas as pd
from sklearn.externals import joblib
import json
import sys
import tqdm
from mls import Server
import lightgbm as lgb
import lpl
LOGGER = lpl.getLogger('Analyser')

from utils import *

class IDS(object):
    def __init__(self):
        self.model = joblib.load('Models/GradientBoostingModel.pkl')
        self.traffic = pd.DataFrame()
        self.cols = ['dst_port_https', 'highest_layer_HTTP', 'is_internal_traffic', 'dst_port_less_1023', 'is_internal_ip', 'dst_port_http',
         'flags', 'src_port_https', 'ip_len', 'http_cookies_len', 'http_site_level', 'ssl_record_version', 'highest_layer_MEDIA',
          'highest_layer_TCP', 'src_port_http', 'time_to_live', 'ssl_len_mean', 'highest_layer_IMAGE-GIF', 'src_port_less_1023',
           'dst_port_type', 'highest_layer_DATA-TEXT-LINES', 'highest_layer_DNS', 'highest_layer_NBNS', 'highest_layer_SSL',
            'traffic_class', 'has_http_cookies', 'time_since_first_frame_tcp', 'highest_layer__WS.MALFORMED', 'captured_len',
             'http_user_agent', 'time_between_frames_mean', 'highest_layer_OCSP','highest_layer_PNG',
              'src_port_type', 'domain_levels', 'highest_layer_IMAGE-JFIF', 'highest_layer_DATA']


    def analyze_traffic(packets):
        temp_df = pd.DataFrame.from_dict(packets)
        self.traffic = self.traffic.concat([self.traffic, temp_df])
        data = self.traffic.groupby(["http_host"]).apply(lambda x: x.sample(3)).reset_index(drop=True)
        data["src_port_type"] = data["src_port"].apply(lambda x: 1 if x in range(49152,65535) else 0)
        data["dst_port_type"] = data["dst_port"].apply(lambda x: 1 if x in range(49152,65535) else 0)
        data = pd.get_dummies(data, columns=["highest_layer"])
        data["src_port_less_1023"] = data["src_port"].apply(lambda x: official_ports_(x))
        data["dst_port_less_1023"] = data["dst_port"].apply(lambda x: official_ports_(x))
        data["src_port_http"] = data["src_port"].apply(lambda x: official_ports__(x))
        data["dst_port_http"] = data["dst_port"].apply(lambda x: official_ports__(x))
        data["src_port_https"] = data["src_port"].apply(lambda x: official_ports___(x))
        data["dst_port_https"] = data["dst_port"].apply(lambda x: official_ports___(x))
        data["is_internal_ip"] = data["src_ip"].apply(lambda x: internal_ip(x))
        data["is_internal_ip_dst"] = data["dst_ip"].apply(lambda x: internal_ip(x))
        data["is_internal_traffic"] = data["is_internal_ip"]+train1["is_internal_ip_dst"]
        data["is_internal_traffic"] = data["is_internal_traffic"].apply(lambda x: internal_traffic(x))
        data["protocol"] = data["protocol"].apply(lambda x: encode_(x))
        time_between_frames_mean = []
        for index, row in tqdm(data.iterrows()):
            search = data[(data["src_ip"]==row["src_ip"]) & (data["dst_ip"]==row["dst_ip"]) & (data["src_port"]==row["src_port"]) & (data["dst_port"]==row["dst_port"]) & (data["timestamp"]<=row["timestamp"])]
            time_between_frames_mean.append(search[search["time_since_prev_frame_tcp"]>0]["time_since_prev_frame_tcp"].mean())
        data["time_between_frames_mean"] = time_between_frames_mean
        data["has_http_cookies"] = data.http_cookie.apply(lambda x: 0 if str(x)=='0' else 1)
        data["http_cookies_len"] = data.http_cookie.apply(lambda x: len(str(x)))
        data['http_site_level'] = data['http_referer'].apply(lambda x: len(str(x).strip("http://").split("/")))
        data['domain_levels'] = data['http_host'].apply(lambda x: len(str(x).strip("www.").split(".")))
        data = data[self.cols]
        return data

    def predict(self, packets):
        """
        :param img:
        :returns boxes:
        """

        preds = self.model.predict(analyze_traffic(packets))
        pred_class = [round(x) for x in preds]
        if 1 in pred_class:
            LOGGER.debug("Found suspicios object in traffic")
        return result


def run_server(port):
    predictor = IDS()
    server = Server(port=port, ml=predictor)
    server()

run_server(int(sys.argv[1]))
